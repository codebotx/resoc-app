{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { create } from \"apisauce\";\nimport { getGeneralApiProblem } from \"./api-problem\";\nimport { DEFAULT_API_CONFIG } from \"./api-config\";\nexport var Api = function () {\n  function Api() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_API_CONFIG;\n\n    _classCallCheck(this, Api);\n\n    this.config = config;\n  }\n\n  _createClass(Api, [{\n    key: \"setup\",\n    value: function setup() {\n      this.apisauce = create({\n        baseURL: this.config.url,\n        timeout: this.config.timeout,\n        headers: {\n          Accept: \"application/json\"\n        }\n      });\n    }\n  }, {\n    key: \"getUsers\",\n    value: function getUsers() {\n      var response, problem, convertUser, rawUsers, resultUsers;\n      return _regeneratorRuntime.async(function getUsers$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.apisauce.get(\"/users\"));\n\n            case 2:\n              response = _context.sent;\n\n              if (response.ok) {\n                _context.next = 7;\n                break;\n              }\n\n              problem = getGeneralApiProblem(response);\n\n              if (!problem) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", problem);\n\n            case 7:\n              convertUser = function convertUser(raw) {\n                return {\n                  id: raw.id,\n                  name: raw.name\n                };\n              };\n\n              _context.prev = 8;\n              rawUsers = response.data;\n              resultUsers = rawUsers.map(convertUser);\n              return _context.abrupt(\"return\", {\n                kind: \"ok\",\n                users: resultUsers\n              });\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](8);\n              return _context.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[8, 14]], Promise);\n    }\n  }, {\n    key: \"getUser\",\n    value: function getUser(id) {\n      var response, problem, resultUser;\n      return _regeneratorRuntime.async(function getUser$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.apisauce.get(\"/users/\" + id));\n\n            case 2:\n              response = _context2.sent;\n\n              if (response.ok) {\n                _context2.next = 7;\n                break;\n              }\n\n              problem = getGeneralApiProblem(response);\n\n              if (!problem) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", problem);\n\n            case 7:\n              _context2.prev = 7;\n              resultUser = {\n                id: response.data.id,\n                name: response.data.name\n              };\n              return _context2.abrupt(\"return\", {\n                kind: \"ok\",\n                user: resultUser\n              });\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](7);\n              return _context2.abrupt(\"return\", {\n                kind: \"bad-data\"\n              });\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[7, 12]], Promise);\n    }\n  }]);\n\n  return Api;\n}();","map":{"version":3,"names":["create","getGeneralApiProblem","DEFAULT_API_CONFIG","Api","config","apisauce","baseURL","url","timeout","headers","Accept","get","response","ok","problem","convertUser","raw","id","name","rawUsers","data","resultUsers","map","kind","users","resultUser","user"],"sources":["D:/Projects/Projects Hub/resoc-nativeapp/ResocAppex/app/services/api/api.ts"],"sourcesContent":["import { ApisauceInstance, create, ApiResponse } from \"apisauce\"\nimport { getGeneralApiProblem } from \"./api-problem\"\nimport { ApiConfig, DEFAULT_API_CONFIG } from \"./api-config\"\nimport * as Types from \"./api.types\"\n\n/**\n * Manages all requests to the API.\n */\nexport class Api {\n  /**\n   * The underlying apisauce instance which performs the requests.\n   */\n  apisauce: ApisauceInstance\n\n  /**\n   * Configurable options.\n   */\n  config: ApiConfig\n\n  /**\n   * Creates the api.\n   *\n   * @param config The configuration to use.\n   */\n  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {\n    this.config = config\n  }\n\n  /**\n   * Sets up the API.  This will be called during the bootup\n   * sequence and will happen before the first React component\n   * is mounted.\n   *\n   * Be as quick as possible in here.\n   */\n  setup() {\n    // construct the apisauce instance\n    this.apisauce = create({\n      baseURL: this.config.url,\n      timeout: this.config.timeout,\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n  }\n\n  /**\n   * Gets a list of users.\n   */\n  async getUsers(): Promise<Types.GetUsersResult> {\n    // make the api call\n    const response: ApiResponse<any> = await this.apisauce.get(`/users`)\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response)\n      if (problem) return problem\n    }\n\n    const convertUser = (raw) => {\n      return {\n        id: raw.id,\n        name: raw.name,\n      }\n    }\n\n    // transform the data into the format we are expecting\n    try {\n      const rawUsers = response.data\n      const resultUsers: Types.User[] = rawUsers.map(convertUser)\n      return { kind: \"ok\", users: resultUsers }\n    } catch {\n      return { kind: \"bad-data\" }\n    }\n  }\n\n  /**\n   * Gets a single user by ID\n   */\n\n  async getUser(id: string): Promise<Types.GetUserResult> {\n    // make the api call\n    const response: ApiResponse<any> = await this.apisauce.get(`/users/${id}`)\n\n    // the typical ways to die when calling an api\n    if (!response.ok) {\n      const problem = getGeneralApiProblem(response)\n      if (problem) return problem\n    }\n\n    // transform the data into the format we are expecting\n    try {\n      const resultUser: Types.User = {\n        id: response.data.id,\n        name: response.data.name,\n      }\n      return { kind: \"ok\", user: resultUser }\n    } catch {\n      return { kind: \"bad-data\" }\n    }\n  }\n}\n"],"mappings":";;;AAAA,SAA2BA,MAA3B,QAAsD,UAAtD;AACA,SAASC,oBAAT;AACA,SAAoBC,kBAApB;AAMA,WAAaC,GAAb;EAgBE,eAAoD;IAAA,IAAxCC,MAAwC,uEAApBF,kBAAoB;;IAAA;;IAClD,KAAKE,MAAL,GAAcA,MAAd;EACD;;EAlBH;IAAA;IAAA,OA2BE,iBAAQ;MAEN,KAAKC,QAAL,GAAgBL,MAAM,CAAC;QACrBM,OAAO,EAAE,KAAKF,MAAL,CAAYG,GADA;QAErBC,OAAO,EAAE,KAAKJ,MAAL,CAAYI,OAFA;QAGrBC,OAAO,EAAE;UACPC,MAAM,EAAE;QADD;MAHY,CAAD,CAAtB;IAOD;EApCH;IAAA;IAAA,OAyCE;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAE2C,KAAKL,QAAL,CAAcM,GAAd,UAF3C;;YAAA;cAEQC,QAFR;;cAAA,IAKOA,QAAQ,CAACC,EALhB;gBAAA;gBAAA;cAAA;;cAMUC,OANV,GAMoBb,oBAAoB,CAACW,QAAD,CANxC;;cAAA,KAOQE,OAPR;gBAAA;gBAAA;cAAA;;cAAA,iCAOwBA,OAPxB;;YAAA;cAUQC,WAVR,GAUsB,SAAdA,WAAc,CAACC,GAAD,EAAS;gBAC3B,OAAO;kBACLC,EAAE,EAAED,GAAG,CAACC,EADH;kBAELC,IAAI,EAAEF,GAAG,CAACE;gBAFL,CAAP;cAID,CAfH;;cAAA;cAmBUC,QAnBV,GAmBqBP,QAAQ,CAACQ,IAnB9B;cAoBUC,WApBV,GAoBsCF,QAAQ,CAACG,GAAT,CAAaP,WAAb,CApBtC;cAAA,iCAqBW;gBAAEQ,IAAI,EAAE,IAAR;gBAAcC,KAAK,EAAEH;cAArB,CArBX;;YAAA;cAAA;cAAA;cAAA,iCAuBW;gBAAEE,IAAI,EAAE;cAAR,CAvBX;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAzCF;IAAA;IAAA,OAwEE,iBAAcN,EAAd;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAE2C,KAAKZ,QAAL,CAAcM,GAAd,aAA4BM,EAA5B,CAF3C;;YAAA;cAEQL,QAFR;;cAAA,IAKOA,QAAQ,CAACC,EALhB;gBAAA;gBAAA;cAAA;;cAMUC,OANV,GAMoBb,oBAAoB,CAACW,QAAD,CANxC;;cAAA,KAOQE,OAPR;gBAAA;gBAAA;cAAA;;cAAA,kCAOwBA,OAPxB;;YAAA;cAAA;cAYUW,UAZV,GAYmC;gBAC7BR,EAAE,EAAEL,QAAQ,CAACQ,IAAT,CAAcH,EADW;gBAE7BC,IAAI,EAAEN,QAAQ,CAACQ,IAAT,CAAcF;cAFS,CAZnC;cAAA,kCAgBW;gBAAEK,IAAI,EAAE,IAAR;gBAAcG,IAAI,EAAED;cAApB,CAhBX;;YAAA;cAAA;cAAA;cAAA,kCAkBW;gBAAEF,IAAI,EAAE;cAAR,CAlBX;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAxEF;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}