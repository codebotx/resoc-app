{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React from \"react\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { WelcomeScreen, DemoScreen, DemoListScreen } from \"../screens\";\nimport { navigationRef, useBackButtonHandler } from \"./navigation-utilities\";\nvar Stack = createNativeStackNavigator();\n\nvar AppStack = function AppStack() {\n  return React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    initialRouteName: \"welcome\"\n  }, React.createElement(Stack.Screen, {\n    name: \"welcome\",\n    component: WelcomeScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"demo\",\n    component: DemoScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"demoList\",\n    component: DemoListScreen\n  }));\n};\n\nexport var AppNavigator = function AppNavigator(props) {\n  var colorScheme = useColorScheme();\n  useBackButtonHandler(canExit);\n  return React.createElement(NavigationContainer, _extends({\n    ref: navigationRef,\n    theme: colorScheme === \"dark\" ? DarkTheme : DefaultTheme\n  }, props), React.createElement(AppStack, null));\n};\nAppNavigator.displayName = \"AppNavigator\";\nvar exitRoutes = [\"welcome\"];\nexport var canExit = function canExit(routeName) {\n  return exitRoutes.includes(routeName);\n};","map":{"version":3,"names":["React","NavigationContainer","DefaultTheme","DarkTheme","createNativeStackNavigator","WelcomeScreen","DemoScreen","DemoListScreen","navigationRef","useBackButtonHandler","Stack","AppStack","headerShown","AppNavigator","props","colorScheme","useColorScheme","canExit","displayName","exitRoutes","routeName","includes"],"sources":["D:/Projects/Projects Hub/resoc-nativeapp/ResocAppex/app/navigators/app-navigator.tsx"],"sourcesContent":["/**\n * The app navigator (formerly \"AppNavigator\" and \"MainNavigator\") is used for the primary\n * navigation flows of your app.\n * Generally speaking, it will contain an auth flow (registration, login, forgot password)\n * and a \"main\" flow which the user will use once logged in.\n */\nimport React from \"react\"\nimport { useColorScheme } from \"react-native\"\nimport { NavigationContainer, DefaultTheme, DarkTheme } from \"@react-navigation/native\"\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\"\nimport { WelcomeScreen, DemoScreen, DemoListScreen } from \"../screens\"\nimport { navigationRef, useBackButtonHandler } from \"./navigation-utilities\"\n\n/**\n * This type allows TypeScript to know what routes are defined in this navigator\n * as well as what properties (if any) they might take when navigating to them.\n *\n * If no params are allowed, pass through `undefined`. Generally speaking, we\n * recommend using your MobX-State-Tree store(s) to keep application state\n * rather than passing state through navigation params.\n *\n * For more information, see this documentation:\n *   https://reactnavigation.org/docs/params/\n *   https://reactnavigation.org/docs/typescript#type-checking-the-navigator\n */\nexport type NavigatorParamList = {\n  welcome: undefined\n  demo: undefined\n  demoList: undefined\n  // ðŸ”¥ Your screens go here\n}\n\n// Documentation: https://reactnavigation.org/docs/stack-navigator/\nconst Stack = createNativeStackNavigator<NavigatorParamList>()\n\nconst AppStack = () => {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n      }}\n      initialRouteName=\"welcome\"\n    >\n      <Stack.Screen name=\"welcome\" component={WelcomeScreen} />\n      <Stack.Screen name=\"demo\" component={DemoScreen} />\n      <Stack.Screen name=\"demoList\" component={DemoListScreen} />\n      {/** ðŸ”¥ Your screens go here */}\n    </Stack.Navigator>\n  )\n}\n\ninterface NavigationProps extends Partial<React.ComponentProps<typeof NavigationContainer>> {}\n\nexport const AppNavigator = (props: NavigationProps) => {\n  const colorScheme = useColorScheme()\n  useBackButtonHandler(canExit)\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n      {...props}\n    >\n      <AppStack />\n    </NavigationContainer>\n  )\n}\n\nAppNavigator.displayName = \"AppNavigator\"\n\n/**\n * A list of routes from which we're allowed to leave the app when\n * the user presses the back button on Android.\n *\n * Anything not on this list will be a standard `back` action in\n * react-navigation.\n *\n * `canExit` is used in ./app/app.tsx in the `useBackButtonHandler` hook.\n */\nconst exitRoutes = [\"welcome\"]\nexport const canExit = (routeName: string) => exitRoutes.includes(routeName)\n"],"mappings":";AAMA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,mBAAT,EAA8BC,YAA9B,EAA4CC,SAA5C,QAA6D,0BAA7D;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,cAApC;AACA,SAASC,aAAT,EAAwBC,oBAAxB;AAsBA,IAAMC,KAAK,GAAGN,0BAA0B,EAAxC;;AAEA,IAAMO,QAAQ,GAAG,SAAXA,QAAW,GAAM;EACrB,OACE,oBAAC,KAAD,CAAO,SAAP;IACE,aAAa,EAAE;MACbC,WAAW,EAAE;IADA,CADjB;IAIE,gBAAgB,EAAC;EAJnB,GAME,oBAAC,KAAD,CAAO,MAAP;IAAc,IAAI,EAAC,SAAnB;IAA6B,SAAS,EAAEP;EAAxC,EANF,EAOE,oBAAC,KAAD,CAAO,MAAP;IAAc,IAAI,EAAC,MAAnB;IAA0B,SAAS,EAAEC;EAArC,EAPF,EAQE,oBAAC,KAAD,CAAO,MAAP;IAAc,IAAI,EAAC,UAAnB;IAA8B,SAAS,EAAEC;EAAzC,EARF,CADF;AAaD,CAdD;;AAkBA,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA4B;EACtD,IAAMC,WAAW,GAAGC,cAAc,EAAlC;EACAP,oBAAoB,CAACQ,OAAD,CAApB;EACA,OACE,oBAAC,mBAAD;IACE,GAAG,EAAET,aADP;IAEE,KAAK,EAAEO,WAAW,KAAK,MAAhB,GAAyBZ,SAAzB,GAAqCD;EAF9C,GAGMY,KAHN,GAKE,oBAAC,QAAD,OALF,CADF;AASD,CAZM;AAcPD,YAAY,CAACK,WAAb,GAA2B,cAA3B;AAWA,IAAMC,UAAU,GAAG,CAAC,SAAD,CAAnB;AACA,OAAO,IAAMF,OAAO,GAAG,SAAVA,OAAU,CAACG,SAAD;EAAA,OAAuBD,UAAU,CAACE,QAAX,CAAoBD,SAApB,CAAvB;AAAA,CAAhB"},"metadata":{},"sourceType":"module"}