{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { isNonScrolling, offsets, presets } from \"./screen.presets\";\nvar isIos = Platform.OS === \"ios\";\n\nfunction ScreenWithoutScrolling(props) {\n  var insets = useSafeAreaInsets();\n  var preset = presets.fixed;\n  var style = props.style || {};\n  var backgroundStyle = props.backgroundColor ? {\n    backgroundColor: props.backgroundColor\n  } : {};\n  var insetStyle = {\n    paddingTop: props.unsafe ? 0 : insets.top\n  };\n  return React.createElement(KeyboardAvoidingView, {\n    style: [preset.outer, backgroundStyle],\n    behavior: isIos ? \"padding\" : undefined,\n    keyboardVerticalOffset: offsets[props.keyboardOffset || \"none\"]\n  }, React.createElement(StatusBar, {\n    barStyle: props.statusBar || \"light-content\"\n  }), React.createElement(View, {\n    style: [preset.inner, style, insetStyle]\n  }, props.children));\n}\n\nfunction ScreenWithScrolling(props) {\n  var insets = useSafeAreaInsets();\n  var preset = presets.scroll;\n  var style = props.style || {};\n  var backgroundStyle = props.backgroundColor ? {\n    backgroundColor: props.backgroundColor\n  } : {};\n  var insetStyle = {\n    paddingTop: props.unsafe ? 0 : insets.top\n  };\n\n  var _Dimensions$get = Dimensions.get(\"window\"),\n      height = _Dimensions$get.height;\n\n  var scrollViewHeight = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      scrollEnabled = _React$useState2[0],\n      setScrollEnabled = _React$useState2[1];\n\n  var updateScrollState = function updateScrollState() {\n    if (props.preset === \"auto\") {\n      var contentFitsScreen = scrollViewHeight.current < height * presets.auto.offset.percent - presets.auto.offset.point;\n      if (scrollEnabled && contentFitsScreen) setScrollEnabled(false);\n      if (!scrollEnabled && !contentFitsScreen) setScrollEnabled(true);\n    } else if (!scrollEnabled) {\n      setScrollEnabled(true);\n    }\n  };\n\n  var onContentSizeChange = function onContentSizeChange(contentWidth, contentHeight) {\n    scrollViewHeight.current = contentHeight;\n    updateScrollState();\n  };\n\n  if (scrollViewHeight.current !== null) updateScrollState();\n  return React.createElement(KeyboardAvoidingView, {\n    style: [preset.outer, backgroundStyle],\n    behavior: isIos ? \"padding\" : undefined,\n    keyboardVerticalOffset: offsets[props.keyboardOffset || \"none\"]\n  }, React.createElement(StatusBar, {\n    barStyle: props.statusBar || \"light-content\"\n  }), React.createElement(View, {\n    style: [preset.outer, backgroundStyle, insetStyle]\n  }, React.createElement(ScrollView, {\n    style: [preset.outer, backgroundStyle],\n    contentContainerStyle: [preset.inner, style],\n    keyboardShouldPersistTaps: props.keyboardShouldPersistTaps || \"handled\",\n    onContentSizeChange: props.preset === \"auto\" ? onContentSizeChange : undefined,\n    scrollEnabled: scrollEnabled\n  }, props.children)));\n}\n\nexport function Screen(props) {\n  if (isNonScrolling(props.preset)) {\n    return React.createElement(ScreenWithoutScrolling, props);\n  } else {\n    return React.createElement(ScreenWithScrolling, props);\n  }\n}","map":{"version":3,"names":["React","useSafeAreaInsets","isNonScrolling","offsets","presets","isIos","Platform","OS","ScreenWithoutScrolling","props","insets","preset","fixed","style","backgroundStyle","backgroundColor","insetStyle","paddingTop","unsafe","top","outer","undefined","keyboardOffset","statusBar","inner","children","ScreenWithScrolling","scroll","Dimensions","get","height","scrollViewHeight","useRef","useState","scrollEnabled","setScrollEnabled","updateScrollState","contentFitsScreen","current","auto","offset","percent","point","onContentSizeChange","contentWidth","contentHeight","keyboardShouldPersistTaps","Screen"],"sources":["D:/Projects/Projects Hub/resoc-nativeapp/ResocAppex/app/components/screen/screen.tsx"],"sourcesContent":["import * as React from \"react\"\nimport {\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  StatusBar,\n  View,\n  Dimensions,\n} from \"react-native\"\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\"\nimport { ScreenProps } from \"./screen.props\"\nimport { isNonScrolling, offsets, presets } from \"./screen.presets\"\n\nconst isIos = Platform.OS === \"ios\"\n\nfunction ScreenWithoutScrolling(props: ScreenProps) {\n  const insets = useSafeAreaInsets()\n  const preset = presets.fixed\n  const style = props.style || {}\n  const backgroundStyle = props.backgroundColor ? { backgroundColor: props.backgroundColor } : {}\n  const insetStyle = { paddingTop: props.unsafe ? 0 : insets.top }\n\n  return (\n    <KeyboardAvoidingView\n      style={[preset.outer, backgroundStyle]}\n      behavior={isIos ? \"padding\" : undefined}\n      keyboardVerticalOffset={offsets[props.keyboardOffset || \"none\"]}\n    >\n      <StatusBar barStyle={props.statusBar || \"light-content\"} />\n      <View style={[preset.inner, style, insetStyle]}>{props.children}</View>\n    </KeyboardAvoidingView>\n  )\n}\n\nfunction ScreenWithScrolling(props: ScreenProps) {\n  const insets = useSafeAreaInsets()\n  const preset = presets.scroll\n  const style = props.style || {}\n  const backgroundStyle = props.backgroundColor ? { backgroundColor: props.backgroundColor } : {}\n  const insetStyle = { paddingTop: props.unsafe ? 0 : insets.top }\n\n  // The followings for <Screen preset='auto'/>\n  // This will automatically disables scrolling if content fits the screen.\n  const { height } = Dimensions.get(\"window\")\n  const scrollViewHeight = React.useRef(null)\n  const [scrollEnabled, setScrollEnabled] = React.useState(true)\n\n  const updateScrollState = () => {\n    if (props.preset === \"auto\") {\n      // check whether if content fits the screen\n      // then toggle scroll state according to it\n      const contentFitsScreen =\n        scrollViewHeight.current < height * presets.auto.offset.percent - presets.auto.offset.point\n\n      // content is less than the size of the screen, so we can disable scrolling\n      if (scrollEnabled && contentFitsScreen) setScrollEnabled(false)\n\n      // content is greater than the size of the screen, so let's enable scrolling\n      if (!scrollEnabled && !contentFitsScreen) setScrollEnabled(true)\n    } else if (!scrollEnabled) {\n      // set back initial value in case it's stucked in a disabled state\n      // i.e. if we've just changed preset from 'auto' to 'scroll'\n      setScrollEnabled(true)\n    }\n  }\n\n  const onContentSizeChange = (contentWidth, contentHeight) => {\n    // update scroll view height\n    scrollViewHeight.current = contentHeight\n\n    // then update scroll state\n    updateScrollState()\n  }\n\n  // update scroll state on every render\n  // when scrollViewHeight isn't null\n  if (scrollViewHeight.current !== null) updateScrollState()\n\n  return (\n    <KeyboardAvoidingView\n      style={[preset.outer, backgroundStyle]}\n      behavior={isIos ? \"padding\" : undefined}\n      keyboardVerticalOffset={offsets[props.keyboardOffset || \"none\"]}\n    >\n      <StatusBar barStyle={props.statusBar || \"light-content\"} />\n      <View style={[preset.outer, backgroundStyle, insetStyle]}>\n        <ScrollView\n          style={[preset.outer, backgroundStyle]}\n          contentContainerStyle={[preset.inner, style]}\n          keyboardShouldPersistTaps={props.keyboardShouldPersistTaps || \"handled\"}\n          onContentSizeChange={props.preset === \"auto\" ? onContentSizeChange : undefined}\n          scrollEnabled={scrollEnabled}\n        >\n          {props.children}\n        </ScrollView>\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\n/**\n * The starting component on every screen in the app.\n *\n * @param props The screen props\n */\nexport function Screen(props: ScreenProps) {\n  if (isNonScrolling(props.preset)) {\n    return <ScreenWithoutScrolling {...props} />\n  } else {\n    return <ScreenWithScrolling {...props} />\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}