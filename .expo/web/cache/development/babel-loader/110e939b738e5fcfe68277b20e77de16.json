{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { Tron } from \"./tron\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ArgType } from \"reactotron-core-client\";\nimport { onSnapshot } from \"mobx-state-tree\";\nimport { DEFAULT_REACTOTRON_CONFIG } from \"./reactotron-config\";\nimport { mst } from \"reactotron-mst\";\nimport { clear } from \"../../utils/storage\";\nimport { goBack, resetRoot, navigate } from \"../../navigators/navigation-utilities\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar noop = function noop() {\n  return undefined;\n};\n\nif (__DEV__) {\n  console.tron = Tron;\n} else {\n  console.tron = {\n    benchmark: noop,\n    clear: noop,\n    close: noop,\n    configure: noop,\n    connect: noop,\n    display: noop,\n    error: noop,\n    image: noop,\n    log: noop,\n    logImportant: noop,\n    onCustomCommand: noop,\n    overlay: noop,\n    reportError: noop,\n    send: noop,\n    startTimer: noop,\n    storybookSwitcher: noop,\n    use: noop,\n    useReactNative: noop,\n    warn: noop\n  };\n}\n\nexport var Reactotron = function () {\n  function Reactotron() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_REACTOTRON_CONFIG;\n\n    _classCallCheck(this, Reactotron);\n\n    this.config = _objectSpread(_objectSpread({\n      host: \"localhost\",\n      useAsyncStorage: true\n    }, config), {}, {\n      state: _objectSpread({\n        initial: false,\n        snapshots: false\n      }, config && config.state)\n    });\n  }\n\n  _createClass(Reactotron, [{\n    key: \"setRootStore\",\n    value: function setRootStore(rootStore, initialData) {\n      if (__DEV__) {\n        rootStore = rootStore;\n        this.rootStore = rootStore;\n        var _this$config$state = this.config.state,\n            initial = _this$config$state.initial,\n            snapshots = _this$config$state.snapshots;\n        var name = \"ROOT STORE\";\n\n        if (initial) {\n          console.tron.display({\n            name: name,\n            value: initialData,\n            preview: \"Initial State\"\n          });\n        }\n\n        if (snapshots) {\n          onSnapshot(rootStore, function (snapshot) {\n            console.tron.display({\n              name: name,\n              value: snapshot,\n              preview: \"New State\"\n            });\n          });\n        }\n\n        console.tron.trackMstNode(rootStore);\n      }\n    }\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      var RX;\n      return _regeneratorRuntime.async(function setup$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (__DEV__) {\n                Tron.configure({\n                  name: this.config.name || require(\"../../../package.json\").name,\n                  host: this.config.host\n                });\n\n                if (Platform.OS !== \"web\") {\n                  if (this.config.useAsyncStorage) {\n                    Tron.setAsyncStorageHandler(AsyncStorage);\n                  }\n\n                  Tron.useReactNative({\n                    asyncStorage: this.config.useAsyncStorage ? undefined : false\n                  });\n                }\n\n                RX = /postProcessSnapshot|@APPLY_SNAPSHOT/;\n                Tron.use(mst({\n                  filter: function filter(event) {\n                    return RX.test(event.name) === false;\n                  }\n                }));\n                Tron.connect();\n                Tron.onCustomCommand({\n                  title: \"Reset Root Store\",\n                  description: \"Resets the MST store\",\n                  command: \"resetStore\",\n                  handler: function handler() {\n                    console.tron.log(\"resetting store\");\n                    clear();\n                  }\n                });\n                Tron.onCustomCommand({\n                  title: \"Reset Navigation State\",\n                  description: \"Resets the navigation state\",\n                  command: \"resetNavigation\",\n                  handler: function handler() {\n                    console.tron.log(\"resetting navigation state\");\n                    resetRoot({\n                      index: 0,\n                      routes: []\n                    });\n                  }\n                });\n                Tron.onCustomCommand({\n                  command: \"navigateTo\",\n                  handler: function handler(args) {\n                    var route = args.route;\n\n                    if (route) {\n                      console.log(\"Navigating to: \" + route);\n                      navigate(route);\n                    } else {\n                      console.log(\"Could not navigate. No route provided.\");\n                    }\n                  },\n                  title: \"Navigate To Screen\",\n                  description: \"Navigates to a screen by name.\",\n                  args: [{\n                    name: \"route\",\n                    type: ArgType.String\n                  }]\n                });\n                Tron.onCustomCommand({\n                  title: \"Go Back\",\n                  description: \"Goes back\",\n                  command: \"goBack\",\n                  handler: function handler() {\n                    console.tron.log(\"Going back\");\n                    goBack();\n                  }\n                });\n\n                if (this.config.clearOnLoad) {\n                  Tron.clear();\n                }\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Reactotron;\n}();","map":{"version":3,"names":["Tron","AsyncStorage","ArgType","onSnapshot","DEFAULT_REACTOTRON_CONFIG","mst","clear","goBack","resetRoot","navigate","noop","undefined","__DEV__","console","tron","benchmark","close","configure","connect","display","error","image","log","logImportant","onCustomCommand","overlay","reportError","send","startTimer","storybookSwitcher","use","useReactNative","warn","Reactotron","config","host","useAsyncStorage","state","initial","snapshots","rootStore","initialData","name","value","preview","snapshot","trackMstNode","require","Platform","OS","setAsyncStorageHandler","asyncStorage","RX","filter","event","test","title","description","command","handler","index","routes","args","route","type","String","clearOnLoad"],"sources":["D:/Projects/Projects Hub/resoc-nativeapp/ResocAppex/app/services/reactotron/reactotron.ts"],"sourcesContent":["import { Tron } from \"./tron\"\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { ArgType } from \"reactotron-core-client\"\nimport { RootStore } from \"../../models/root-store/root-store\"\nimport { onSnapshot } from \"mobx-state-tree\"\nimport { ReactotronConfig, DEFAULT_REACTOTRON_CONFIG } from \"./reactotron-config\"\nimport { mst } from \"reactotron-mst\"\nimport { clear } from \"../../utils/storage\"\nimport { goBack, resetRoot, navigate } from \"../../navigators/navigation-utilities\"\nimport { Platform } from \"react-native\"\n\n// Teach TypeScript about the bad things we want to do.\ndeclare global {\n  interface Console {\n    /**\n     * Hey, it's Reactotron if we're in dev, and no-ops if we're in prod.\n     */\n    tron: typeof Tron\n  }\n}\n\n/** Do Nothing. */\nconst noop = () => undefined\n\n// in dev, we attach Reactotron, in prod we attach a interface-compatible mock.\nif (__DEV__) {\n  console.tron = Tron // attach reactotron to `console.tron`\n} else {\n  // attach a mock so if things sneaky by our __DEV__ guards, we won't crash.\n  console.tron = {\n    benchmark: noop,\n    clear: noop,\n    close: noop,\n    configure: noop,\n    connect: noop,\n    display: noop,\n    error: noop,\n    image: noop,\n    log: noop,\n    logImportant: noop,\n    onCustomCommand: noop,\n    overlay: noop,\n    reportError: noop,\n    send: noop,\n    startTimer: noop,\n    storybookSwitcher: noop,\n    use: noop,\n    useReactNative: noop,\n    warn: noop,\n  }\n}\n\n/**\n * You'll probably never use the service like this since we hang the Reactotron\n * instance off of `console.tron`. This is only to be consistent with the other\n * services.\n */\nexport class Reactotron {\n  config: ReactotronConfig\n\n  rootStore: any\n\n  /**\n   * Create the Reactotron service.\n   *\n   * @param config the configuration\n   */\n  constructor(config: ReactotronConfig = DEFAULT_REACTOTRON_CONFIG) {\n    // merge the passed in config with some defaults\n    this.config = {\n      host: \"localhost\",\n      useAsyncStorage: true,\n      ...config,\n      state: {\n        initial: false,\n        snapshots: false,\n        ...(config && config.state),\n      },\n    }\n  }\n\n  /**\n   * Hook into the root store for doing awesome state-related things.\n   *\n   * @param rootStore The root store\n   */\n  setRootStore(rootStore: any, initialData: any) {\n    if (__DEV__) {\n      rootStore = rootStore as RootStore // typescript hack\n      this.rootStore = rootStore\n\n      const { initial, snapshots } = this.config.state\n      const name = \"ROOT STORE\"\n\n      // logging features\n      if (initial) {\n        console.tron.display({ name, value: initialData, preview: \"Initial State\" })\n      }\n      // log state changes?\n      if (snapshots) {\n        onSnapshot(rootStore, (snapshot) => {\n          console.tron.display({ name, value: snapshot, preview: \"New State\" })\n        })\n      }\n\n      console.tron.trackMstNode(rootStore)\n    }\n  }\n\n  /**\n   * Configure reactotron based on the the config settings passed in, then connect if we need to.\n   */\n  async setup() {\n    // only run this in dev... metro bundler will ignore this block: 🎉\n    if (__DEV__) {\n      // configure reactotron\n      Tron.configure({\n        name: this.config.name || require(\"../../../package.json\").name,\n        host: this.config.host,\n      })\n\n      // hookup middleware\n      if (Platform.OS !== \"web\") {\n        if (this.config.useAsyncStorage) {\n          Tron.setAsyncStorageHandler(AsyncStorage)\n        }\n        Tron.useReactNative({\n          asyncStorage: this.config.useAsyncStorage ? undefined : false,\n        })\n      }\n\n      // ignore some chatty `mobx-state-tree` actions\n      const RX = /postProcessSnapshot|@APPLY_SNAPSHOT/\n\n      // hookup mobx-state-tree middleware\n      Tron.use(\n        mst({\n          filter: (event) => RX.test(event.name) === false,\n        }),\n      )\n\n      // connect to the app\n      Tron.connect()\n\n      // Register Custom Commands\n      Tron.onCustomCommand({\n        title: \"Reset Root Store\",\n        description: \"Resets the MST store\",\n        command: \"resetStore\",\n        handler: () => {\n          console.tron.log(\"resetting store\")\n          clear()\n        },\n      })\n\n      Tron.onCustomCommand({\n        title: \"Reset Navigation State\",\n        description: \"Resets the navigation state\",\n        command: \"resetNavigation\",\n        handler: () => {\n          console.tron.log(\"resetting navigation state\")\n          resetRoot({ index: 0, routes: [] })\n        },\n      })\n\n      Tron.onCustomCommand({\n        command: \"navigateTo\",\n        handler: (args) => {\n          const { route } = args\n          if (route) {\n            console.log(`Navigating to: ${route}`)\n            navigate(route)\n          } else {\n            console.log(\"Could not navigate. No route provided.\")\n          }\n        },\n        title: \"Navigate To Screen\",\n        description: \"Navigates to a screen by name.\",\n        args: [\n          {\n            name: \"route\",\n            type: ArgType.String,\n          },\n        ],\n      })\n\n      Tron.onCustomCommand({\n        title: \"Go Back\",\n        description: \"Goes back\",\n        command: \"goBack\",\n        handler: () => {\n          console.tron.log(\"Going back\")\n          goBack()\n        },\n      })\n\n      // clear if we should\n      if (this.config.clearOnLoad) {\n        Tron.clear()\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}