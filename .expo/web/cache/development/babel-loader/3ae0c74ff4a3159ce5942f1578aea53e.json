{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { onSnapshot } from \"mobx-state-tree\";\nimport { RootStoreModel } from \"./root-store\";\nimport { Environment } from \"../environment\";\nimport * as storage from \"../../utils/storage\";\nvar ROOT_STATE_STORAGE_KEY = \"root\";\nexport function createEnvironment() {\n  var env;\n  return _regeneratorRuntime.async(function createEnvironment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          env = new Environment();\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(env.setup());\n\n        case 3:\n          return _context.abrupt(\"return\", env);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setupRootStore() {\n  var rootStore, data, env;\n  return _regeneratorRuntime.async(function setupRootStore$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(createEnvironment());\n\n        case 2:\n          env = _context2.sent;\n          _context2.prev = 3;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(storage.load(ROOT_STATE_STORAGE_KEY));\n\n        case 6:\n          _context2.t0 = _context2.sent;\n\n          if (_context2.t0) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.t0 = {};\n\n        case 9:\n          data = _context2.t0;\n          rootStore = RootStoreModel.create(data, env);\n          _context2.next = 17;\n          break;\n\n        case 13:\n          _context2.prev = 13;\n          _context2.t1 = _context2[\"catch\"](3);\n          rootStore = RootStoreModel.create({}, env);\n          __DEV__ && console.tron.error(_context2.t1.message, null);\n\n        case 17:\n          if (__DEV__) {\n            env.reactotron.setRootStore(rootStore, data);\n          }\n\n          onSnapshot(rootStore, function (snapshot) {\n            return storage.save(ROOT_STATE_STORAGE_KEY, snapshot);\n          });\n          return _context2.abrupt(\"return\", rootStore);\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[3, 13]], Promise);\n}","map":{"version":3,"names":["onSnapshot","RootStoreModel","Environment","storage","ROOT_STATE_STORAGE_KEY","createEnvironment","env","setup","setupRootStore","load","data","rootStore","create","__DEV__","console","tron","error","message","reactotron","setRootStore","snapshot","save"],"sources":["D:/Projects/Projects Hub/resoc-nativeapp/ResocAppex/app/models/root-store/setup-root-store.ts"],"sourcesContent":["import { onSnapshot } from \"mobx-state-tree\"\nimport { RootStoreModel, RootStore } from \"./root-store\"\nimport { Environment } from \"../environment\"\nimport * as storage from \"../../utils/storage\"\n\n/**\n * The key we'll be saving our state as within async storage.\n */\nconst ROOT_STATE_STORAGE_KEY = \"root\"\n\n/**\n * Setup the environment that all the models will be sharing.\n *\n * The environment includes other functions that will be picked from some\n * of the models that get created later. This is how we loosly couple things\n * like events between models.\n */\nexport async function createEnvironment() {\n  const env = new Environment()\n  await env.setup()\n  return env\n}\n\n/**\n * Setup the root state.\n */\nexport async function setupRootStore() {\n  let rootStore: RootStore\n  let data: any\n\n  // prepare the environment that will be associated with the RootStore.\n  const env = await createEnvironment()\n  try {\n    // load data from storage\n    data = (await storage.load(ROOT_STATE_STORAGE_KEY)) || {}\n    rootStore = RootStoreModel.create(data, env)\n  } catch (e) {\n    // if there's any problems loading, then let's at least fallback to an empty state\n    // instead of crashing.\n    rootStore = RootStoreModel.create({}, env)\n\n    // but please inform us what happened\n    __DEV__ && console.tron.error(e.message, null)\n  }\n\n  // reactotron logging\n  if (__DEV__) {\n    env.reactotron.setRootStore(rootStore, data)\n  }\n\n  // track changes & save to storage\n  onSnapshot(rootStore, (snapshot) => storage.save(ROOT_STATE_STORAGE_KEY, snapshot))\n\n  return rootStore\n}\n"],"mappings":";AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,cAAT;AACA,SAASC,WAAT;AACA,OAAO,KAAKC,OAAZ;AAKA,IAAMC,sBAAsB,GAAG,MAA/B;AASA,OAAO,SAAeC,iBAAf;EAAA;EAAA;IAAA;MAAA;QAAA;UACCC,GADD,GACO,IAAIJ,WAAJ,EADP;UAAA;UAAA,iCAECI,GAAG,CAACC,KAAJ,EAFD;;QAAA;UAAA,iCAGED,GAHF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AASP,OAAO,SAAeE,cAAf;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,iCAKaH,iBAAiB,EAL9B;;QAAA;UAKCC,GALD;UAAA;UAAA;UAAA,iCAQWH,OAAO,CAACM,IAAR,CAAaL,sBAAb,CARX;;QAAA;UAAA;;UAAA;YAAA;YAAA;UAAA;;UAAA,eAQoD,EARpD;;QAAA;UAQHM,IARG;UASHC,SAAS,GAAGV,cAAc,CAACW,MAAf,CAAsBF,IAAtB,EAA4BJ,GAA5B,CAAZ;UATG;UAAA;;QAAA;UAAA;UAAA;UAaHK,SAAS,GAAGV,cAAc,CAACW,MAAf,CAAsB,EAAtB,EAA0BN,GAA1B,CAAZ;UAGAO,OAAO,IAAIC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,aAAEC,OAArB,EAA8B,IAA9B,CAAX;;QAhBG;UAoBL,IAAIJ,OAAJ,EAAa;YACXP,GAAG,CAACY,UAAJ,CAAeC,YAAf,CAA4BR,SAA5B,EAAuCD,IAAvC;UACD;;UAGDV,UAAU,CAACW,SAAD,EAAY,UAACS,QAAD;YAAA,OAAcjB,OAAO,CAACkB,IAAR,CAAajB,sBAAb,EAAqCgB,QAArC,CAAd;UAAA,CAAZ,CAAV;UAzBK,kCA2BET,SA3BF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}