"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
var Onboard;
(function (Onboard) {
    Onboard.run = (context) => __awaiter(this, void 0, void 0, function* () {
        const { onboardAdd, printWizard, executeAddRule, addMore, reviewAndSave, } = require('../extensions/functions/onboard');
        const { print, filesystem } = context;
        // check is there an existing .solidarity file?
        // TODO:  Delete file for them
        // TODO BONUS: Eventually allow live editor to modify .solidarity files
        if (filesystem.exists('.solidarity')) {
            print.info("There seems to already be a Solidarity file.  You're already onboarded");
            /*
            const userAnswer = await prompt.ask({
              name: 'createFile',
              type: 'confirm',
              message: 'Existing `.solidarity` file found for this project.  Would you like to delete it and start fresh?',
            })
      
            if (userAnswer.createFile) {
              print.info('create wut?')
            } else {
              print.info('No Solidarity File')
            }
            */
        }
        else {
            context.bufferSettings = {
                requirements: {},
            };
            printWizard(context);
            let repeat = true;
            let rules = [];
            while (repeat) {
                // Find out what they wanted
                let answer = yield onboardAdd(context);
                // execute their will
                const rule = yield executeAddRule(context, answer);
                rules.push(rule);
                // more?
                repeat = yield addMore(context);
            }
            reviewAndSave(context, rules);
        }
    });
})(Onboard || (Onboard = {}));
module.exports = {
    description: 'Wizard walkthrough to create your Solidarity file',
    alias: 'o',
    run: Onboard.run,
};
//# sourceMappingURL=onboard.js.map