"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
// Have to do this for tests rather than import
const Listr = require('listr');
var Solidarity;
(function (Solidarity) {
    const { toPairs } = require('ramda');
    const checkForEscapeHatchFlags = (context) => __awaiter(this, void 0, void 0, function* () {
        const { print, parameters } = context;
        const { options } = parameters;
        if (!options)
            return;
        if (options.help || options.h) {
            // Just looking for help
            print.printCommands(context);
            process.exit(0);
        }
        else if (options.version || options.v) {
            // Just looking for version
            print.info(require('../../package.json').version);
            process.exit(0);
        }
    });
    Solidarity.run = (context) => __awaiter(this, void 0, void 0, function* () {
        // Node Modules Quirk
        require('../extensions/functions/quirksNodeModules');
        // drop out fast in these situations
        yield checkForEscapeHatchFlags(context);
        const { parameters, print, solidarity } = context;
        const { checkRequirement, getSolidaritySettings, setOutputMode } = solidarity;
        // get settings or error
        let solidaritySettings;
        try {
            solidaritySettings = yield getSolidaritySettings(context);
        }
        catch (e) {
            print.error(e.message || 'No Solidarity Settings Found');
            print.info(`Make sure you are in the correct folder or run ${print.colors.success('solidarity onboard')} to create a .solidarity file for this project.`);
            process.exit(3);
        }
        // Merge flags and configs
        context.outputMode = setOutputMode(context.parameters, solidaritySettings);
        // Adjust output depending on mode
        let listrSettings = { concurrent: true, collapse: false, exitOnError: false };
        switch (context.outputMode) {
            case types_1.SolidarityOutputMode.SILENT:
                listrSettings = Object.assign(Object.assign({}, listrSettings), { renderer: 'silent' });
                break;
            case types_1.SolidarityOutputMode.MODERATE:
                // have input clear itself
                listrSettings = Object.assign(Object.assign({}, listrSettings), { clearOutput: true });
        }
        // build Listr of checks
        const checks = new Listr(yield toPairs(solidaritySettings.requirements).map((requirement) => ({
            title: requirement[0],
            task: () => __awaiter(this, void 0, void 0, function* () { return checkRequirement(requirement, context, Boolean(parameters.options.fix)); }),
        })), listrSettings);
        // run the array of promises in Listr
        yield checks
            .run()
            .then(results => {
            const silentOutput = context.outputMode === types_1.SolidarityOutputMode.SILENT;
            // Add empty line between final result if printing rule results
            if (!silentOutput)
                print.success('');
            if (!silentOutput)
                print.success(print.checkmark + ' Solidarity checks valid');
        })
            .catch(_err => {
            const silentOutput = context.outputMode === types_1.SolidarityOutputMode.SILENT;
            // Used to have message in the err, but that goes away with `exitOnError: false` so here's a generic one
            if (!silentOutput)
                print.error('Solidarity checks failed');
            process.exit(2);
        });
    });
})(Solidarity || (Solidarity = {}));
// Export command
module.exports = {
    description: 'Check environment against solidarity rules',
    run: Solidarity.run,
};
//# sourceMappingURL=solidarity.js.map