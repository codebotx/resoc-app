"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
module.exports = (rule, context) => __awaiter(void 0, void 0, void 0, function* () {
    const { system, strings } = context;
    try {
        // execute the command
        const exec = yield system.spawn(rule.command, { shell: true });
        const { stdout = '' } = exec;
        // clean it up
        const output = strings.trimEnd(stdout.toString());
        // look for matches
        let isMatch = false;
        const match = rule.match && new RegExp(rule.match);
        if (match) {
            isMatch = match.test(output);
        }
        const standardError = `Shell rule '${rule.command}' output did not contain match: ${match}`;
        if (!isMatch)
            throw new Error(rule.error || standardError);
    }
    catch (e) {
        throw new Error(rule.error || e.message);
    }
});
//# sourceMappingURL=checkShell.js.map