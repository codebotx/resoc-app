"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (context, rule) => __awaiter(void 0, void 0, void 0, function* () {
    const { prompt } = context;
    ////////////////// CUSTOM ERROR MESSAGE?
    const customError = yield prompt.ask({
        name: 'value',
        type: 'confirm',
        message: 'Would you like to write a custom error message for if this rule fails to pass?',
    });
    if (customError.value) {
        const errorMessage = yield prompt.ask({
            name: 'value',
            type: 'input',
            message: 'Your custom error message',
        });
        rule.error = errorMessage.value;
    }
    ////////////////// PLATFORM SPECIFIC?
    const platformSpecific = yield prompt.ask({
        name: 'value',
        type: 'confirm',
        message: 'Should this rule only apply on certain operating systems?',
    });
    if (platformSpecific.value) {
        const platforms = yield prompt.ask({
            name: 'value',
            type: 'multiselect',
            message: 'Which operating systems does this rule run for?',
            choices: ['macos', 'freebsd', 'linux', 'sunos', 'windows'],
        });
        rule.platform = platforms.value;
    }
    ////////////////// SKIP CI?
    const ciSkip = yield prompt.ask({
        name: 'value',
        type: 'confirm',
        message: 'Should this rule be skipped on a Continuous Integration server?',
    });
    if (ciSkip.value) {
        rule.ci = true;
    }
    return rule;
});
//# sourceMappingURL=kickoffAllRules.js.map