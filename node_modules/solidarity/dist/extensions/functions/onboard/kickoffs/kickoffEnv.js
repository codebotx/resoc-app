"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (context) => __awaiter(void 0, void 0, void 0, function* () {
    const { print, prompt } = context;
    const pickSentence = 'Pick from existing environment vars on this machine';
    const typeSentence = 'Type the name of the environment variable to enforce';
    const envStyle = yield prompt.ask({
        name: 'value',
        type: 'select',
        message: 'How would you like to pick your environment variable',
        choices: [pickSentence, typeSentence],
    });
    let pickEnv;
    if (envStyle.value === pickSentence) {
        pickEnv = yield prompt.ask({
            name: 'value',
            type: 'select',
            message: 'Which environment variable would you like to enforce?',
            choices: Object.keys(process.env),
        });
    }
    else {
        pickEnv = yield prompt.ask({
            name: 'value',
            type: 'input',
            message: 'Which environment variable would you like to enforce?',
        });
    }
    if (pickEnv.value === pickSentence || pickEnv.value === typeSentence) {
        throw new Error('No Environment Variable was chosen');
    }
    else {
        print.success(`Enforcing ENV for ${pickEnv.value}`);
        return { rule: 'env', variable: pickEnv.value };
    }
});
//# sourceMappingURL=kickoffEnv.js.map