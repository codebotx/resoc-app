"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const kickoffs_1 = require("./kickoffs");
// TODO: Make this fancier
exports.default = (context, answer) => __awaiter(void 0, void 0, void 0, function* () {
    const { print } = context;
    print.success('ADD RULE ' + answer);
    let rule;
    switch (answer) {
        case 'cli':
            rule = yield kickoffs_1.default.kickoffCLI(context);
            break;
        case 'env':
            rule = yield kickoffs_1.default.kickoffEnv(context);
            break;
        case 'file':
            rule = yield kickoffs_1.default.kickoffFile(context);
            break;
        case 'dir':
            rule = yield kickoffs_1.default.kickoffDir(context);
            break;
        case 'shell':
            rule = yield kickoffs_1.default.kickoffShell(context);
            break;
        default:
            print.info('This should never happen');
            throw 'unknown rule type';
    }
    // Now ask questions for ALL rules
    rule = yield kickoffs_1.default.kickoffAllRules(context, rule);
    // Now add rule to requirement
    return rule;
});
//# sourceMappingURL=executeAddRule.js.map