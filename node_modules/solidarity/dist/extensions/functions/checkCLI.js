"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
module.exports = (rule, context) => __awaiter(void 0, void 0, void 0, function* () {
    const { semver, solidarity } = context;
    const binaryExists = require('./binaryExists');
    // First check for binary
    if (!binaryExists(rule.binary, context)) {
        throw new Error(`Binary '${rule.binary}' not found`);
    }
    // Is there a semver rule?
    if (rule.semver) {
        // ensure we have valid rule input
        if (!semver.validRange(rule.semver))
            throw new Error(`Invalid semver rule ${rule.semver}`);
        let binaryVersion;
        binaryVersion = yield solidarity.getVersion(rule, context);
        // pad zeros for any non-semver version systems (rules still work)
        let binarySemantic = binaryVersion;
        while (binarySemantic.split('.').length < 3) {
            binarySemantic += '.0';
        }
        const customMessage = (rule.error || '')
            .replace(/{{wantedVersion}}/gi, /\^|\~/.test(rule.semver) ? rule.semver.substr(1) : rule.semver)
            .replace(/{{installedVersion}}/gi, binaryVersion);
        const standardMessage = `${rule.binary}: you have '${binaryVersion}', but the project requires '${rule.semver}'`;
        const message = customMessage || standardMessage;
        // I can't get no satisfaction
        if (!semver.satisfies(binarySemantic, rule.semver)) {
            throw new Error(message);
        }
    }
});
//# sourceMappingURL=checkCLI.js.map