"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReport = (context) => __awaiter(void 0, void 0, void 0, function* () {
    const { print, system, envinfo } = context;
    const { colors } = print;
    const OS = yield envinfo.getOSInfo();
    const CPU = yield envinfo.getCPUInfo();
    return {
        basicInfo: [
            ['System Basics', 'Value'],
            ['OS', OS],
            ['CPU', CPU],
        ],
        cliRules: [['Binary', 'Location', 'Version', 'Desired']],
        envRules: [['Environment Var', 'Value']],
        filesystemRules: [['Location', 'Type', 'Exists']],
        shellRules: [['Command', 'Pattern', 'Matches']],
        customRules: [],
        // helper for adding CLI rules
        addCLI: function (cliReportConfig) {
            const desired = cliReportConfig.desired ? cliReportConfig.desired : colors.green('*ANY*');
            let location = system.which(cliReportConfig.binary);
            if (Boolean(location) === false) {
                location = colors.red('*MISSING*');
            }
            this.cliRules.push([cliReportConfig.binary, location, cliReportConfig.version, desired]);
        },
    };
});
//# sourceMappingURL=solidarityReport.js.map